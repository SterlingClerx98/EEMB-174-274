---
title: "Lab 3"
author: "Stephen R. Proulx"
date: "12/27/2020"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(rethinking)
library(bayesplot)
```
# Bayesian Statistical Modeling Winter 2021
# Lab Exercise, Week 3
# 1/21/2021

*When is this lab due?* Labs are due on the Thursday after they are assigned. However, in many cases you can complete them during the lab period itself.   This assignment is due on Thursday, 1/28/2021. Submit homework to gradescope: *Link here*




### Medicago height data
We'll use publicly available data from:  https://figshare.com/articles/dataset/Medicago_truncatula_plant_height_data/8018873
The data we use are heights of the plant *Medicago truncatula*. The experiment in question was looking at the effect of plants on caterpillars, but we will just use the plant height data. It comes in multiple replicate observations, and we'll fit the mean and variance, using a normal distribution for the likelihood, for each replicate separately. 


Load the data
```{r}
load("MedicagoHeights.Rds")
view(plant.heights)
```

### Visualize and summarize the data
Plot histrograms or density plots of height for each replicate and summarize the means and standard deviations of each replicate. You may use the `filter` function to pick data from specific replicates, or add `fill=Replicate` to the `aes` directive in ggplot. like this:
```{r}
ggplot(plant.heights, aes(x = height, fill = Replicate)) +
  geom_density(alpha = 0.5)
```




### Summarize the replicates
Summaries can be done using dplyr or by first subsetting the data to get each replicate and then using precis or mean and variance commands. 

```{r}
plant.heights %>%
  group_by(Replicate) %>%
  summarise(mean = mean(height), sd = sd(height))
```


### Fit the different replicates and see how they compare
We'll use grid approximation to fit the means and standard deviations for each replicate separately. To get you started we'll define the log likelihood function. It requires that the height data be in a dataframe called `dataset` and a column called `height`. 



```{r define_like_function}
height_loglik_f <- function(mu_input, sigma_input) {
  sum(dnorm(
    dataset$height,
    mean = mu_input,
    sd = sigma_input,
    log = TRUE
  ))
}


height_loglik_f_vec <- Vectorize(height_loglik_f)
```


Now define a grid of $\mu$ and $\sigma$ values and then go through the same steps that we did in class to calculate the posterior probability for each $\mu$ and $\sigma$ pair.

```{r grid_posterior_setup}
# code to grid out the posterior

n <- 200 # how many steps to use in the grid.

d_grid <-
  tibble(
    mu = seq(from = 50, to = 200, length.out = n),
    sigma = seq(from = 0, to = 50, length.out = n)
  ) %>%
  # expand can be used to combine all the elements from two rows
  expand(mu, sigma)
```

Next we use each replicate train a posterior. Below is the code for doing this on replicate one.

```{r}

# Calculate Posterior
dataset <- filter(plant.heights, Replicate == "Rep1")
posterior_table1 <- d_grid %>%
  mutate(
    log_likelihood = height_loglik_f_vec(mu, sigma),
    log_prior_mu = dnorm(mu, mean = 100, sd = 20, log = T),
    log_prior_sigma = dunif(sigma, min = 0, max = 50, log = T),
    raw_log_posterior = log_likelihood + log_prior_mu + log_prior_sigma,
    log_posterior = raw_log_posterior - max(raw_log_posterior),
    raw_posterior = exp(log_posterior),
    posterior = raw_posterior / sum(raw_posterior)
  )

# Draw Samples
samples_height_model1 <- sample_n(posterior_table1, weight = posterior, size = 1e4, replace = TRUE) %>%
  select(mu, sigma)

# Summarise samples
precis(samples_height_model1)

bayesplot::mcmc_pairs(samples_height_model1,
  diag_fun = "dens",
  off_diag_fun = "hex"
)
```
We now want to do the same thing for all the other plots. Rather than copy-pasting this code many times it is good form to make it into a function. That way if later you want to change something you only have to change it in one place instead of five.

We'll also make the function return the posterior samples because we will use those later.

```{r}

# This function takes in the replicate number and returns
# the bayesplot along with the posterior samples.
make.and.plot.posterior <- function(replicate.num) {
  dataset <- filter(plant.heights, Replicate == paste("Rep", replicate.num, sep = ""))
  posterior_table <- d_grid %>%
    mutate(
      log_likelihood = height_loglik_f_vec(mu, sigma),
      log_prior_mu = dnorm(mu, mean = 100, sd = 20, log = T),
      log_prior_sigma = dunif(sigma, min = 0, max = 50, log = T),
      raw_log_posterior = log_likelihood + log_prior_mu + log_prior_sigma,
      log_posterior = raw_log_posterior - max(raw_log_posterior),
      raw_posterior = exp(log_posterior),
      posterior = raw_posterior / sum(raw_posterior)
    )


  samples_height_model <- sample_n(posterior_table, weight = posterior, size = 1e4, replace = TRUE) %>%
    select(mu, sigma)

  precis(samples_height_model)

  bp <- bayesplot::mcmc_pairs(samples_height_model,
    diag_fun = "dens",
    off_diag_fun = "hex"
  )

  list("plot" = bp, "samples" = samples_height_model) # returns the data in a list
}
```
With the function defined we can run it for the other replicates. Let's look at the plots, which are the 'first' plot element in the list of returned values.

```{r}

# First save the posterior samples so they are easy to access for the later parts of the lab
samples_height_model1 <- make.and.plot.posterior(1)
samples_height_model2 <- make.and.plot.posterior(2)
samples_height_model3 <- make.and.plot.posterior(3)
samples_height_model4 <- make.and.plot.posterior(4)
samples_height_model5 <- make.and.plot.posterior(5)
```

```{r}
# Display the plots
samples_height_model1$plot
samples_height_model1$plot
samples_height_model1$plot
samples_height_model1$plot
samples_height_model1$plot
```
```{r}
# Alternativly, we could put all the data into a list and iterate over it.

all_models <- list(samples_height_model1, samples_height_model2, samples_height_model3, samples_height_model4, samples_height_model5)

for (datalist in all_models) {
  print(datalist$plot) # Things don't autodisplay in for loops, so we tell it to print.
}
```


### Compare the estimates
Use the methods you have available to quantify the different replicates. What can you say about the similarities or differences between them?

**You can explore this on your own. Eyeballing is fine, but below are some possible stats you might have extracted.**

```{r}
samples_height_model1$samples
HPDI(samples_height_model1$samples$mu)
HPDI(samples_height_model1$samples$sigma)
mean(samples_height_model1$samples$mu)
mean(samples_height_model1$samples$sigma)
```

If you have the mind to you could automate the above to iterate through every model and output the stats into a tibble.



### Posterior simulations

Use the fitted model from replicate 1 to create a posterior simulation. This means that you will sample the values of $\mu$ and $\sigma$, and then produce an observation of 98 plant heights (this is how many observations there are of each replicate), and find the mean of this simulated dataset. Simulate this 1,000 times, and compare the distribution of this mean to the actual mean of replicate 2. Describe what you see, is it what you expected?


```{r}
calc_mean_height <- Vectorize(
  function(mu_input, sigma_input) {
    mean(rnorm(98, mean = mu_input, sd = sigma_input))
  }
)
```

```{r}
post_sim1 <- samples_height_model1$samples %>%
  mutate(mean.height = calc_mean_height(mu, sigma))

ci <- HPDI(post_sim1$mean.height)
```

Compare the mean of the simulated data from replicate 2 to the actual data and mean of actual data from replicate 2
```{r}
data <- filter(plant.heights, Replicate == "Rep1")
ggplot(post_sim1, aes(x = mean.height)) +
  geom_density(alpha = .4, position = "identity", fill = "blue") +
  geom_vline(xintercept = ci[1], color = "red") +
  geom_vline(xintercept = ci[2], color = "red") +
  geom_vline(xintercept = mean(data$height), color = "green")
```

### Extra credit
Do the sampe procedure for the other replicates. Explain any anomolies.

*Here is the code for one of the replicates. If you want you can automate this for the rest. Or you can simply copy and paste.*

```{r}
post_sim2 <- samples_height_model2$samples %>%
  mutate(mean.height = calc_mean_height(mu, sigma))

ci <- HPDI(post_sim2$mean.height)

data <- filter(plant.heights, Replicate == "Rep2")
ggplot(post_sim2, aes(x = mean.height)) +
  geom_density(alpha = .4, position = "identity", fill = "blue") +
  geom_vline(xintercept = ci[1], color = "red") +
  geom_vline(xintercept = ci[2], color = "red") +
  geom_vline(xintercept = mean(data$height), color = "green")
```
